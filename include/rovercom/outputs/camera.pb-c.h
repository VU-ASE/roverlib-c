/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: outputs/camera.proto */

#ifndef PROTOBUF_C_outputs_2fcamera_2eproto__INCLUDED
#define PROTOBUF_C_outputs_2fcamera_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ProtobufMsgs__CameraSensorOutput ProtobufMsgs__CameraSensorOutput;
typedef struct _ProtobufMsgs__Resolution ProtobufMsgs__Resolution;
typedef struct _ProtobufMsgs__HorizontalScan ProtobufMsgs__HorizontalScan;
typedef struct _ProtobufMsgs__DebugFrame ProtobufMsgs__DebugFrame;
typedef struct _ProtobufMsgs__CanvasObject ProtobufMsgs__CanvasObject;
typedef struct _ProtobufMsgs__CanvasObject__Point ProtobufMsgs__CanvasObject__Point;
typedef struct _ProtobufMsgs__CanvasObject__Circle ProtobufMsgs__CanvasObject__Circle;
typedef struct _ProtobufMsgs__Canvas ProtobufMsgs__Canvas;


/* --- enums --- */

/*
 * Possible Objects the Imaging Service may detect
 */
typedef enum _ProtobufMsgs__DetectedObjects {
  /*
   * Finish_line_detected 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__FINISH_LINE = 0,
  /*
   * Car no longer on the track 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__OFF_TRACK = 1,
  /*
   * Detected obstacle 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__OBSTACLE = 2,
  /*
   * Detected intersection 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__INTERSECTION = 3,
  /*
   * Can not find left lane 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__MISSING_LEFT_LANE = 4,
  /*
   * Can not find right lane 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__MISSING_RIGHT_LANE = 5,
  /*
   * 90 degree right turn 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__SHARP_RIGHT = 6,
  /*
   * 90 degree left turn  
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__SHARP_LEFT = 7,
  /*
   * Detected U turn 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__U_TURN = 8,
  /*
   * Detected S turn (double u turn) 
   */
  PROTOBUF_MSGS__DETECTED_OBJECTS__S_TURN = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__DETECTED_OBJECTS)
} ProtobufMsgs__DetectedObjects;

/* --- messages --- */

/*
 * This is the message format that a camera-like service can send out. For example, the official ASE imaging service
 * uses this output format. This can then be used by (for example) a controller, to determine how to steer, to stay
 * on the track, or to detect obstacles, intersections, etc.
 */
struct  _ProtobufMsgs__CameraSensorOutput
{
  ProtobufCMessage base;
  /*
   * Basic information, contains everything you need to know to steer and compute the middle of the track
   */
  /*
   * Resolution of the image in pixels
   */
  ProtobufMsgs__Resolution *resolution;
  /*
   * Horizontal scans of the track, where each scan returns the track edges it finds in the image
   */
  size_t n_horizontalscans;
  ProtobufMsgs__HorizontalScan **horizontalscans;
  size_t n_detectedobjects;
  ProtobufMsgs__DetectedObjects *detectedobjects;
  /*
   * Additional information that can be used to debug the image processing
   * if present, it is rendered in roverctl-web
   */
  ProtobufMsgs__DebugFrame *debugframe;
};
#define PROTOBUF_MSGS__CAMERA_SENSOR_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__camera_sensor_output__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL }


struct  _ProtobufMsgs__Resolution
{
  ProtobufCMessage base;
  /*
   * Width of the image in pixels
   */
  uint32_t width;
  /*
   * Height of the image in pixels
   */
  uint32_t height;
};
#define PROTOBUF_MSGS__RESOLUTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__resolution__descriptor) \
    , 0, 0 }


struct  _ProtobufMsgs__HorizontalScan
{
  ProtobufCMessage base;
  /*
   * Leftmost point in the scan in pixels (is left edge of the track)
   */
  uint32_t xleft;
  /*
   * Rightmost point in the scan in pixels (is right edge of the track)
   */
  uint32_t xright;
  /*
   * Y coordinate of the scan in pixels
   */
  uint32_t y;
};
#define PROTOBUF_MSGS__HORIZONTAL_SCAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__horizontal_scan__descriptor) \
    , 0, 0, 0 }


struct  _ProtobufMsgs__DebugFrame
{
  ProtobufCMessage base;
  /*
   * (Compressed) JPEG image of the camera output, useful for debugging
   * just JPEG bytes, that will be rendered in roverctl-web
   */
  ProtobufCBinaryData jpeg;
  /*
   * A "canvas" that you can "draw" on, for example by placing points, these are also rendered in roverctl-web
   */
  ProtobufMsgs__Canvas *canvas;
};
#define PROTOBUF_MSGS__DEBUG_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__debug_frame__descriptor) \
    , {0,NULL}, NULL }


struct  _ProtobufMsgs__CanvasObject__Point
{
  ProtobufCMessage base;
  uint32_t x;
  uint32_t y;
};
#define PROTOBUF_MSGS__CANVAS_OBJECT__POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__canvas_object__point__descriptor) \
    , 0, 0 }


struct  _ProtobufMsgs__CanvasObject__Circle
{
  ProtobufCMessage base;
  ProtobufMsgs__CanvasObject__Point *center;
  uint32_t radius;
  uint32_t width;
};
#define PROTOBUF_MSGS__CANVAS_OBJECT__CIRCLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__canvas_object__circle__descriptor) \
    , NULL, 0, 0 }


typedef enum {
  PROTOBUF_MSGS__CANVAS_OBJECT__OBJECT__NOT_SET = 0,
  PROTOBUF_MSGS__CANVAS_OBJECT__OBJECT_CIRCLE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__CANVAS_OBJECT__OBJECT)
} ProtobufMsgs__CanvasObject__ObjectCase;

struct  _ProtobufMsgs__CanvasObject
{
  ProtobufCMessage base;
  ProtobufMsgs__CanvasObject__ObjectCase object_case;
  union {
    ProtobufMsgs__CanvasObject__Circle *circle;
  };
};
#define PROTOBUF_MSGS__CANVAS_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__canvas_object__descriptor) \
    , PROTOBUF_MSGS__CANVAS_OBJECT__OBJECT__NOT_SET, {0} }


struct  _ProtobufMsgs__Canvas
{
  ProtobufCMessage base;
  /*
   * The width and height are a legacy feature, they should be the same as the resolution of the camera
   */
  uint32_t width;
  uint32_t height;
  size_t n_objects;
  ProtobufMsgs__CanvasObject **objects;
};
#define PROTOBUF_MSGS__CANVAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__canvas__descriptor) \
    , 0, 0, 0,NULL }


/* ProtobufMsgs__CameraSensorOutput methods */
void   protobuf_msgs__camera_sensor_output__init
                     (ProtobufMsgs__CameraSensorOutput         *message);
size_t protobuf_msgs__camera_sensor_output__get_packed_size
                     (const ProtobufMsgs__CameraSensorOutput   *message);
size_t protobuf_msgs__camera_sensor_output__pack
                     (const ProtobufMsgs__CameraSensorOutput   *message,
                      uint8_t             *out);
size_t protobuf_msgs__camera_sensor_output__pack_to_buffer
                     (const ProtobufMsgs__CameraSensorOutput   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__CameraSensorOutput *
       protobuf_msgs__camera_sensor_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__camera_sensor_output__free_unpacked
                     (ProtobufMsgs__CameraSensorOutput *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__Resolution methods */
void   protobuf_msgs__resolution__init
                     (ProtobufMsgs__Resolution         *message);
size_t protobuf_msgs__resolution__get_packed_size
                     (const ProtobufMsgs__Resolution   *message);
size_t protobuf_msgs__resolution__pack
                     (const ProtobufMsgs__Resolution   *message,
                      uint8_t             *out);
size_t protobuf_msgs__resolution__pack_to_buffer
                     (const ProtobufMsgs__Resolution   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__Resolution *
       protobuf_msgs__resolution__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__resolution__free_unpacked
                     (ProtobufMsgs__Resolution *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__HorizontalScan methods */
void   protobuf_msgs__horizontal_scan__init
                     (ProtobufMsgs__HorizontalScan         *message);
size_t protobuf_msgs__horizontal_scan__get_packed_size
                     (const ProtobufMsgs__HorizontalScan   *message);
size_t protobuf_msgs__horizontal_scan__pack
                     (const ProtobufMsgs__HorizontalScan   *message,
                      uint8_t             *out);
size_t protobuf_msgs__horizontal_scan__pack_to_buffer
                     (const ProtobufMsgs__HorizontalScan   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__HorizontalScan *
       protobuf_msgs__horizontal_scan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__horizontal_scan__free_unpacked
                     (ProtobufMsgs__HorizontalScan *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__DebugFrame methods */
void   protobuf_msgs__debug_frame__init
                     (ProtobufMsgs__DebugFrame         *message);
size_t protobuf_msgs__debug_frame__get_packed_size
                     (const ProtobufMsgs__DebugFrame   *message);
size_t protobuf_msgs__debug_frame__pack
                     (const ProtobufMsgs__DebugFrame   *message,
                      uint8_t             *out);
size_t protobuf_msgs__debug_frame__pack_to_buffer
                     (const ProtobufMsgs__DebugFrame   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__DebugFrame *
       protobuf_msgs__debug_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__debug_frame__free_unpacked
                     (ProtobufMsgs__DebugFrame *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__CanvasObject__Point methods */
void   protobuf_msgs__canvas_object__point__init
                     (ProtobufMsgs__CanvasObject__Point         *message);
/* ProtobufMsgs__CanvasObject__Circle methods */
void   protobuf_msgs__canvas_object__circle__init
                     (ProtobufMsgs__CanvasObject__Circle         *message);
/* ProtobufMsgs__CanvasObject methods */
void   protobuf_msgs__canvas_object__init
                     (ProtobufMsgs__CanvasObject         *message);
size_t protobuf_msgs__canvas_object__get_packed_size
                     (const ProtobufMsgs__CanvasObject   *message);
size_t protobuf_msgs__canvas_object__pack
                     (const ProtobufMsgs__CanvasObject   *message,
                      uint8_t             *out);
size_t protobuf_msgs__canvas_object__pack_to_buffer
                     (const ProtobufMsgs__CanvasObject   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__CanvasObject *
       protobuf_msgs__canvas_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__canvas_object__free_unpacked
                     (ProtobufMsgs__CanvasObject *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__Canvas methods */
void   protobuf_msgs__canvas__init
                     (ProtobufMsgs__Canvas         *message);
size_t protobuf_msgs__canvas__get_packed_size
                     (const ProtobufMsgs__Canvas   *message);
size_t protobuf_msgs__canvas__pack
                     (const ProtobufMsgs__Canvas   *message,
                      uint8_t             *out);
size_t protobuf_msgs__canvas__pack_to_buffer
                     (const ProtobufMsgs__Canvas   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__Canvas *
       protobuf_msgs__canvas__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__canvas__free_unpacked
                     (ProtobufMsgs__Canvas *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ProtobufMsgs__CameraSensorOutput_Closure)
                 (const ProtobufMsgs__CameraSensorOutput *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__Resolution_Closure)
                 (const ProtobufMsgs__Resolution *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__HorizontalScan_Closure)
                 (const ProtobufMsgs__HorizontalScan *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__DebugFrame_Closure)
                 (const ProtobufMsgs__DebugFrame *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__CanvasObject__Point_Closure)
                 (const ProtobufMsgs__CanvasObject__Point *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__CanvasObject__Circle_Closure)
                 (const ProtobufMsgs__CanvasObject__Circle *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__CanvasObject_Closure)
                 (const ProtobufMsgs__CanvasObject *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__Canvas_Closure)
                 (const ProtobufMsgs__Canvas *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    protobuf_msgs__detected_objects__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__camera_sensor_output__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__resolution__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__horizontal_scan__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__debug_frame__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__canvas_object__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__canvas_object__point__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__canvas_object__circle__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__canvas__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_outputs_2fcamera_2eproto__INCLUDED */
